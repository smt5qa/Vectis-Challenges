# -*- coding: utf-8 -*-
"""vectisChallenge01_Tate_Steven

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19kpuaYW0MAgacx_HvMIZmH6j5saYVxcg
"""

from math import sqrt

# Deterministic Miller Test to check for primality
def isPrime(n):
    if n < 2: 
      return False
    for x in range(2, int(sqrt(n)) + 1):
        if n % x == 0:
            return False
    return True

# Sum elements in array
def _sum(arr):
  sum = 0

  for i in arr:
    sum = sum + i

  return(sum)

# Count and Sum Prime Numbers from 1 to N
def _countSumPrimes(n):
  counter = 1
  num = 1

  # Initialize Array of Primes
  primes = [1]

  # Append if num is prime
  while counter < n:
    if isPrime(num):
      primes.append(num)
      counter += 1

    num += 1

  # Calculate sum of array
  return(_sum(primes))

# Calculate Prime Factors of number N
def _primeFactors(n):
  factors = []

  while n % 2 == 0:
    factors.append(2)
    n = n / 2

  for i in range(3, int(sqrt(n)) + 1, 2):
    while n % i == 0:
      factors.append(int(i))
      n = n / i

  if n > 2:
    factors.append(int(n))

  return factors

# Calculate sum of first N number of prime numbers
N = 100003
sum = _countSumPrimes(N)

# Find largest prime factor of three right-most digits
sumString = str(sum)
threeString = sumString[len(sumString)-3:len(sumString)]
primeFactor = int(threeString)
factors = _primeFactors(primeFactor)
largestFactor = max(factors)

print("The largest prime factor of the three right-most digits of the sum of the first 100,003 primes is " + str(largestFactor) + ".")